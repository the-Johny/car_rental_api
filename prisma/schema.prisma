// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  firstname String
  lastname  String

  email     String   @unique
  password  String
  phone     String  @unique
  role      UserRole     @default(CUSTOMER)
  isVerified Boolean @default(false)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Password reset functionality
  resetToken    String?   @unique
  resetTokenExp DateTime?
  verifyToken String
  verifyTokenExpiresAt DateTime?
  rentals   Booking[]
  reviews   Review[]
  isDeleted Boolean @default(false)
  deletedAt DateTime?
}

model Vehicle {
  id          String     @id @default(uuid())
  name        String
  title       String
  description String
  pricePerHour Float
  category    Category
  available   Boolean    @default(true)
  location    String
  imageUrl    String
  features    Feature[]  @relation("VehicleFeatures")
  review      Review[]
  bookings    Booking[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean @default(false)
  deletedAt   DateTime?
}

model Booking {
  id          String     @id @default(uuid())
  userId      String
  vehicleId   String
  startdate   DateTime
  enddate     DateTime
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id])
  payment     Payment?
  isDeleted   Boolean @default(false)
  deletedAt   DateTime?
}

model Payment {
  id          String     @id @default(uuid())
  bookingId   String     @unique
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime   @default(now())

  booking     Booking    @relation(fields: [bookingId], references: [id])
}

model Review {
  id          String     @id @default(uuid())
  userId      String
  vehicleId   String
  rating      Float
  comment     String
  createdAt   DateTime   @default(now())

  user        User       @relation(fields: [userId], references: [id])
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id])
}

model Feature {
  id       String     @id @default(uuid())
  name     String     @unique
  vehicles Vehicle[]  @relation("VehicleFeatures")
}

// ENUMS
enum UserRole {
  ADMIN
  AGENT
  CUSTOMER
}

enum Category {
  SUV
  SEDAN
  ECONOMY
  VAN
  LUXURY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentMethod {
  CASH
  MPESA
  PAYPAL
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}